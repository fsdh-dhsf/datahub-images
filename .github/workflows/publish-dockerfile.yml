name: Publish Container 

on:  
  pull_request:
    branches:
      - main
    paths:
      - "managed-containers/**"

  push:
    branches:
      - main
    paths:
      - "managed-containers/**"

permissions: read-all


jobs:
  build-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Convert App token
        id: create_token
        uses: getsentry/action-github-app-token@d4b5da6c5e37703f8c3b3e43abb5705b46e159cc # v3.0.0
        with:
          app_id: ${{ vars.FSDH_PACKAGE_ADMIN_APP_ID }}
          private_key: ${{ secrets.FSDH_PACKAGE_ADMIN_APP_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to get commit information, useful for getting details of previous commits

      - name: Get list of changed files
        id: get_changed_files
        run: |
          # Get the list of changed files between the base and head of the pull request
          changed_files=$(git diff --name-only "${{ github.event.pull_request.base.sha }}" "${{ github.sha }}")
          # Convert the list of changed files to a JSON array
          changed_files_json=$(echo "$changed_files" | jq -R -s -c 'split("\n")[:-1] | map(select(length > 0))')

          echo "Changed files: $changed_files"

          # Set the JSON string as an output for use in later steps
          echo "changed_files=$changed_files_json" >> "$GITHUB_OUTPUT"

      - name: Generate list of Dockerfiles to build
        id: generate_dockerfile_list
        run: |
          # Get the JSON array of changed files from the previous step
          changed_files_json='${{ steps.get_changed_files.outputs.changed_files }}'

          # Convert JSON array to a bash array
          mapfile -t changed_files_list < <(echo "$changed_files_json" | jq -r '.[]')

          dockerfiles_to_build=()
          for file in "${changed_files_list[@]}"; do
            # Check if the changed file is a Dockerfile
            if [[ $file == *Dockerfile ]]; then
              dockerfiles_to_build+=("$file")
            # Check if the directory of the changed file contains a Dockerfile
            elif [[ -f $(dirname "$file")/Dockerfile ]]; then
              dockerfiles_to_build+=("$(dirname "$file")/Dockerfile")
            fi

            # Check if the file is in managed-containers and add the top-level Dockerfile if it exists
            if [[ $file == managed-containers/*/* ]]; then
              # Extract the top-level directory (e.g., managed-containers/component)
              top_level_dir=$(echo "$file" | cut -d'/' -f1-2)
              if [[ -f "$top_level_dir/Dockerfile" ]]; then
                dockerfiles_to_build+=("$top_level_dir/Dockerfile")
              fi
            fi
          done

          # Remove duplicate Dockerfiles from the list
          mapfile -t unique_dockerfiles_to_build < <(printf "%s\n" "${dockerfiles_to_build[@]}" | sort -u)

          # Exit if no Dockerfiles are found
          if [ ${#unique_dockerfiles_to_build[@]} -eq 0 ]; then
            echo "No Dockerfiles found to build. Exiting..."
            exit 0
          fi

          echo "Unique Dockerfiles to build: ${unique_dockerfiles_to_build[*]}"

          # Convert the list of unique Dockerfiles to a JSON array for output
          unique_dockerfiles_to_build_json=$(printf '%s\n' "${unique_dockerfiles_to_build[@]}" | jq -R -s -c 'split("\n") | map(select(length > 0))')

          # Set the JSON string as an output for use in later steps
          echo "dockerfiles_to_build=$unique_dockerfiles_to_build_json" >> "$GITHUB_OUTPUT"


      - name: Set up Docker Build Environment
        uses: docker/setup-buildx-action@v3
        # Set up Docker Buildx, which allows building multi-platform Docker images

      - name: Log in to GitHub Container Registry
        env:
          GITHUB_TOKEN: ${{ steps.create_token.outputs.token }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ vars.FSDH_PACKAGE_ADMIN_APP_ID }}
          password: ${{ env.GITHUB_TOKEN }}

      - name: Build and Scan Docker Images
        env:
          GITHUB_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          # Get the JSON array of Dockerfiles to build from the previous step
          dockerfiles_json='${{ steps.generate_dockerfile_list.outputs.dockerfiles_to_build }}'
          # Convert JSON array to a bash array
          mapfile -t dockerfiles_list < <(echo "$dockerfiles_json" | jq -r '.[]')

          echo "Dockerfile files to process: ${dockerfiles_list[*]}"

          # Iterate through each Dockerfile path
          for dockerfile in "${dockerfiles_list[@]}"; do
            # Extract the package name from the directory containing the Dockerfile and convert to lowercase
            package_name=$(basename "$(dirname "$dockerfile")" | tr '[:upper:]' '[:lower:]')

            # Define the image name with the :latest tag
            image_name="$package_name:latest"
            base_name="ghcr.io/${{ github.repository_owner }}/$package_name"

            echo "Building Docker image: $image_name from $dockerfile"

            # Build the Docker image using Docker Buildx with --no-cache to ensure fresh layers
            docker buildx build --load --no-cache -t "$image_name" -f "$dockerfile" "$(dirname "$dockerfile")"

            docker push "$image_name"

          done
